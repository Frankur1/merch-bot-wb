import telebot
import pandas as pd
from io import BytesIO
import re

TOKEN = "8204801402:AAEiLD24Eg-6XSSmgId6N93U4oM1NJ3RxPc"
ADMIN_ID = 712270836  # –¢–≤–æ–π ID
bot = telebot.TeleBot(TOKEN)

# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ ===
excel_path = "–ú–µ—Ä—á_–ø–æ–∑–∏—Ü–∏–∏_—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (1) (1).xlsx"
df_products = pd.read_excel(excel_path)

# –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω
def parse_price(val):
    if isinstance(val, str):
        # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ —è—á–µ–π–∫–µ
        nums = re.findall(r"\d+", val.replace(" ", ""))
        if len(nums) == 2:
            return int(nums[1])  # –±–µ—Ä—ë–º –±–æ–ª—å—à—É—é
        elif len(nums) == 1:
            return int(nums[0])
        else:
            return 0
    elif isinstance(val, (int, float)):
        return int(val)
    return 0

product_names = df_products.iloc[:, 0].tolist()
product_prices = [parse_price(x) for x in df_products.iloc[:, 1].tolist()]

# === –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_data = {}

countries = ["–ë–µ–ª–∞—Ä—É—Å—å", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ê—Ä–º–µ–Ω–∏—è", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", "–ö–∏—Ç–∞–π", "–¢—É—Ä—Ü–∏—è"]

# === START ===
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for c in countries:
        markup.add(c)
    bot.send_message(message.chat.id, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=markup)
    bot.register_next_step_handler(message, select_country)

def select_country(message):
    country = message.text
    if country not in countries:
        bot.send_message(message.chat.id, "‚ùóÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return start(message)
    user_data[message.chat.id] = {"country": country, "items": {}}
    send_next_product(message.chat.id, 0)

def send_next_product(chat_id, index):
    if index >= len(product_names):
        bot.send_message(chat_id, "‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ *–ì–æ—Ç–æ–≤–æ*, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", parse_mode='Markdown')
        bot.register_next_step_handler_by_chat_id(chat_id, finish_submission)
        return

    name = product_names[index]
    price = product_prices[index]
    bot.send_message(chat_id, f"üõç {name}\nüí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {price}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
    bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: save_quantity(msg, index))

def save_quantity(message, index):
    chat_id = message.chat.id
    try:
        qty = int(message.text)
    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return send_next_product(chat_id, index)

    name = product_names[index]
    price = product_prices[index]
    user_data[chat_id]["items"][name] = {"qty": qty, "price": price}
    send_next_product(chat_id, index + 1)

def finish_submission(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)
    if not data:
        return bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")

    items = data["items"]
    country = data["country"]

    results = []
    for name, info in items.items():
        qty = info["qty"]
        price = info["price"]
        if qty > 0:
            results.append({
                "–°—Ç—Ä–∞–Ω–∞": country,
                "–ü–æ–∑–∏—Ü–∏—è": name,
                "–ö–æ–ª-–≤–æ": qty,
                "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞": price,
                "–°—É–º–º–∞": qty * price
            })

    if not results:
        bot.send_message(chat_id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
        return

    df = pd.DataFrame(results)
    output = BytesIO()
    df.to_excel(output, index=False)
    output.seek(0)

    bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é, —Å–ø–∞—Å–∏–±–æ!")
    bot.send_document(ADMIN_ID, output, visible_file_name=f"–ú–µ—Ä—á_{country}.xlsx")

# === –ó–∞–ø—É—Å–∫ ===
bot.polling(none_stop=True)
